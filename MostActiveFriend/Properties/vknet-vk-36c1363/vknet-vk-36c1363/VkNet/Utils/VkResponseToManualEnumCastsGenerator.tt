<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
// Autogenerated at <#= DateTime.Now.ToString() #>
// DO NOT EDIT THIS FILE CAUSE ALL CHANGES WILL BE DELETED AUTOMATICALLY
using VkNet.Enums;
namespace VkNet.Utils
{
    partial class VkResponse
    {
<#
	var path = Directory.GetParent(Host.ResolvePath("")) + @"\Enums";
	List<string> files = Directory.GetFiles(path).Where(s => Path.GetExtension(s) == ".cs").ToList();
	foreach (var directory in Directory.GetDirectories(path))
	{
		files.AddRange(Directory.GetFiles(directory).Where(s => Path.GetExtension(s) == ".cs").ToList());
	}

List<string> types = new List<string>();

	foreach (var file in files)
	{
		var text = File.ReadAllText(file);
		
		text = Regex.Replace(text, @"((//|///).*$)", string.Empty, RegexOptions.IgnoreCase |RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace);
		
		
		
		var typePattern = @"public\s+enum\s+([a-zA-Z]+?)\s*\{[^\[]*\[DefaultValue\][^\]]*\}";
		var defaultValuePattern = @"(\[DefaultValue\]\s*?([a-zA-Z][a-zA-Z0-9]*))";
		
		var matches = Regex.Matches(text, typePattern, RegexOptions.Multiline | RegexOptions.IgnoreCase);
		foreach (var match in matches)
		{
			var type = Regex.Replace(match.ToString(), typePattern, @"$1", RegexOptions.Multiline);
			
			string value = Regex.Match(match.ToString(), defaultValuePattern, RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace).ToString();
			value = Regex.Replace(value, defaultValuePattern, @"$2", RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace);
#>
		public static implicit operator <#= type #>(VkResponse response)
		{
			if (response == null)
				return <#= type #>.<#= value #>;
			return Utilities.EnumFrom<<#= type #>>(response);
		}

<#
		}
	}
 #>

	}
}